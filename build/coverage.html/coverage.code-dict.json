{"/home/travis/build/npmtest/node-npmtest-do-wrapper/test.js":"/* istanbul instrument in package npmtest_do_wrapper */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-do-wrapper/lib.npmtest_do_wrapper.js":"/* istanbul instrument in package npmtest_do_wrapper */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_do_wrapper = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_do_wrapper = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-do-wrapper/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-do-wrapper && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_do_wrapper */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_do_wrapper\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_do_wrapper.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_do_wrapper.rollup.js'] =\n            local.assetsDict['/assets.npmtest_do_wrapper.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_do_wrapper.__dirname + '/lib.npmtest_do_wrapper.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-do-wrapper/node_modules/do-wrapper/dist/do-wrapper.js":"\"use strict\";function _interopRequireDefault(e){return e&&e.__esModule?e:{\"default\":e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}Object.defineProperty(exports,\"__esModule\",{value:!0});var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,\"value\"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),_requestHelper=require(\"./request-helper\"),_requestHelper2=_interopRequireDefault(_requestHelper),DigitalOcean=function(){function e(t,n){_classCallCheck(this,e),this.per_page=n,this.requestHelper=new _requestHelper2[\"default\"](t)}return _createClass(e,[{key:\"account\",value:function(e){var t={actionPath:\"account\"};return this.requestHelper.request(t,e)}},{key:\"accountGetActions\",value:function(e,t){var n={actionPath:\"actions\",key:\"actions\",qs:{tag_name:e?e.tag_name||\"\":\"\",per_page:e?e.per_page||this.per_page:this.per_page,page:e?e.page||1:1},includeAll:e?e.includeAll||!1:!1};return this.requestHelper.request(n,t)}},{key:\"accountGetAction\",value:function(e,t){var n={actionPath:\"actions/\"+encodeURIComponent(e)};return this.requestHelper.request(n,t)}},{key:\"accountGetKeys\",value:function(e,t){var n={actionPath:\"account/keys\",key:\"ssh_keys\",qs:{tag_name:e?e.tag_name||\"\":\"\",per_page:e?e.per_page||this.per_page:this.per_page,page:e?e.page||1:1},includeAll:e?e.includeAll||!1:!1};return this.requestHelper.request(n,t)}},{key:\"accountAddKey\",value:function(e,t){var n={actionPath:\"account/keys\",method:\"POST\",body:e};return this.requestHelper.request(n,t)}},{key:\"accountGetKeyById\",value:function(e,t){var n={actionPath:\"account/keys/\"+encodeURIComponent(e)};return this.requestHelper.request(n,t)}},{key:\"accountGetKeyByFingerprint\",value:function(e,t){var n={actionPath:\"account/keys/\"+encodeURIComponent(e)};return this.requestHelper.request(n,t)}},{key:\"accountRenameKey\",value:function(e,t,n){var a={actionPath:\"account/keys/\"+encodeURIComponent(e),method:\"PUT\",body:{name:t}};return this.requestHelper.request(a,n)}},{key:\"accountDeleteKey\",value:function(e,t){var n={actionPath:\"account/keys/\"+encodeURIComponent(e),method:\"DELETE\"};return this.requestHelper.request(n,t)}},{key:\"dropletsGetAll\",value:function(e,t){var n={actionPath:\"droplets\",key:\"droplets\",qs:{tag_name:e.tag_name||void 0,per_page:e?e.per_page||this.per_page:this.per_page,page:e?e.page||1:1},includeAll:e?e.includeAll||!1:!1};return this.requestHelper.request(n,t)}},{key:\"dropletsGetKernels\",value:function(e,t,n){var a={actionPath:\"droplets/\"+encodeURIComponent(e)+\"/kernels\",key:\"kernels\",qs:{tag_name:t?t.tag_name||\"\":\"\",per_page:t?t.per_page||this.per_page:this.per_page,page:t?t.page||1:1},includeAll:t?t.includeAll||!1:!1};return this.requestHelper.request(a,n)}},{key:\"dropletsGetSnapshots\",value:function(e,t,n){var a={actionPath:\"droplets/\"+encodeURIComponent(e)+\"/snapshots\",key:\"snapshots\",qs:{tag_name:t?t.tag_name||\"\":\"\",per_page:t?t.per_page||this.per_page:this.per_page,page:t?t.page||1:1},includeAll:t?t.includeAll||!1:!1};return this.requestHelper.request(a,n)}},{key:\"dropletsGetBackups\",value:function(e,t,n){var a={actionPath:\"droplets/\"+encodeURIComponent(e)+\"/backups\",key:\"backups\",qs:{tag_name:t?t.tag_name||\"\":\"\",per_page:t?t.per_page||this.per_page:this.per_page,page:t?t.page||1:1},includeAll:t?t.includeAll||!1:!1};return this.requestHelper.request(a,n)}},{key:\"dropletsGetActions\",value:function(e,t,n){var a={actionPath:\"droplets/\"+encodeURIComponent(e)+\"/actions\",key:\"actions\",qs:{tag_name:t?t.tag_name||\"\":\"\",per_page:t?t.per_page||this.per_page:this.per_page,page:t?t.page||1:1},includeAll:t?t.includeAll||!1:!1};return this.requestHelper.request(a,n)}},{key:\"dropletsCreate\",value:function(e,t){var n={actionPath:\"droplets\",method:\"POST\",body:e};return this.requestHelper.request(n,t)}},{key:\"dropletsGetById\",value:function(e,t){var n={actionPath:\"droplets/\"+encodeURIComponent(e)};return this.requestHelper.request(n,t)}},{key:\"dropletsDelete\",value:function(e,t){var n={actionPath:\"droplets/\"+encodeURIComponent(e),method:\"DELETE\"};return this.requestHelper.request(n,t)}},{key:\"dropletsGetNeighbors\",value:function(e,t){var n={actionPath:\"droplets/\"+encodeURIComponent(e)+\"/neighbors\"};return this.requestHelper.request(n,t)}},{key:\"dropletsGetNeighborsReport\",value:function(e){var t={actionPath:\"reports/droplet_neighbors\"};return this.requestHelper.request(t,e)}},{key:\"dropletsGetUpgrades\",value:function(e){var t={actionPath:\"droplet_upgrades\"};return this.requestHelper.request(t,e)}},{key:\"dropletsRequestAction\",value:function(e,t,n){var a={actionPath:\"droplets/\"+encodeURIComponent(e)+\"/actions\",method:\"POST\",body:t};return this.requestHelper.request(a,n)}},{key:\"dropletsGetAction\",value:function(e,t,n){var a={actionPath:\"droplets/\"+encodeURIComponent(e)+\"/actions/\"+encodeURIComponent(t)};return this.requestHelper.request(a,n)}},{key:\"domainsGetAll\",value:function(e,t){var n={actionPath:\"domains\",key:\"domains\",qs:{tag_name:e&&e?e.tag_name||\"\":\"\",per_page:e?e.per_page||this.per_page:this.per_page,page:e?e.page||1:1}};return this.requestHelper.request(n,t)}},{key:\"domainsCreate\",value:function(e,t,n){var a={actionPath:\"domains\",method:\"POST\",body:{name:e,ip_address:t}};return this.requestHelper.request(a,n)}},{key:\"domainsGet\",value:function(e,t){var n={actionPath:\"domains/\"+encodeURIComponent(e)};return this.requestHelper.request(n,t)}},{key:\"domainsDelete\",value:function(e,t){var n={actionPath:\"domains/\"+encodeURIComponent(e),method:\"DELETE\"};return this.requestHelper.request(n,t)}},{key:\"domainRecordsGetAll\",value:function(e,t,n){var a={actionPath:\"domains/\"+encodeURIComponent(e)+\"/records\",key:\"domain_records\",qs:{tag_name:t?t.tag_name||\"\":\"\",per_page:t?t.per_page||this.per_page:this.per_page,page:t?t.page||1:1},includeAll:t?t.includeAll||!1:!1};return this.requestHelper.request(a,n)}},{key:\"domainRecordsCreate\",value:function(e,t,n){var a={actionPath:\"domains/\"+encodeURIComponent(e)+\"/records\",method:\"POST\",body:t};return this.requestHelper.request(a,n)}},{key:\"domainRecordsGet\",value:function(e,t,n){var a={actionPath:\"domains/\"+encodeURIComponent(e)+\"/records/\"+encodeURIComponent(t)};return this.requestHelper.request(a,n)}},{key:\"domainRecordsUpdate\",value:function(e,t,n,a){var r={actionPath:\"domains/\"+encodeURIComponent(e)+\"/records/\"+encodeURIComponent(t),method:\"PUT\",body:n};return this.requestHelper.request(r,a)}},{key:\"domainRecordsDelete\",value:function(e,t,n){var a={actionPath:\"domains/\"+encodeURIComponent(e)+\"/records/\"+encodeURIComponent(t),method:\"DELETE\"};return this.requestHelper.request(a,n)}},{key:\"regionsGetAll\",value:function(e,t){var n={actionPath:\"regions\",key:\"regions\",qs:{tag_name:e?e.tag_name||\"\":\"\",per_page:e?e.per_page||this.per_page:this.per_page,page:e?e.page||1:1},includeAll:e?e.includeAll||!1:!1};return this.requestHelper.request(n,t)}},{key:\"sizesGetAll\",value:function(e,t){var n={actionPath:\"sizes\",key:\"sizes\",qs:{tag_name:e?e.tag_name||\"\":\"\",per_page:e?e.per_page||this.per_page:this.per_page,page:e?e.page||1:1},includeAll:e?e.includeAll||!1:!1};return this.requestHelper.request(n,t)}},{key:\"imagesGetAll\",value:function(e,t){var n={actionPath:\"images\",key:\"images\",qs:{tag_name:e?e.tag_name||\"\":\"\",per_page:e?e.per_page||this.per_page:this.per_page,page:e?e.page||1:1,\"private\":e[\"private\"]||!1,type:e.type||null},includeAll:e?e.includeAll||!1:!1};return this.requestHelper.request(n,t)}},{key:\"imagesGetById\",value:function(e,t){var n={actionPath:\"images/\"+encodeURIComponent(e)};return this.requestHelper.request(n,t)}},{key:\"imagesGetBySlug\",value:function(e,t){var n={actionPath:\"images/\"+encodeURIComponent(e)};return this.requestHelper.request(n,t)}},{key:\"imagesGetActions\",value:function(e,t,n){var a={actionPath:\"images/\"+encodeURIComponent(e)+\"/actions\",key:\"actions\",qs:{tag_name:t?t.tag_name||\"\":\"\",per_page:t?t.per_page||this.per_page:this.per_page,page:t?t.page||1:1},includeAll:t?t.includeAll||!1:!1};return this.requestHelper.request(a,n)}},{key:\"imagesUpdate\",value:function(e,t,n){var a={actionPath:\"images/\"+encodeURIComponent(e),body:{name:t},method:\"PUT\"};return this.requestHelper.request(a,n)}},{key:\"imagesDelete\",value:function(e,t){var n={actionPath:\"images/\"+encodeURIComponent(e),method:\"DELETE\"};return this.requestHelper.request(n,t)}},{key:\"imagesRequestAction\",value:function(e,t,n){var a={actionPath:\"images/\"+encodeURIComponent(e)+\"/actions\",method:\"POST\",body:t};return this.requestHelper.request(a,n)}},{key:\"imagesGetAction\",value:function(e,t,n){var a={actionPath:\"images/\"+encodeURIComponent(e)+\"/actions/\"+encodeURIComponent(t)};return this.requestHelper.request(a,n)}},{key:\"floatingIpsGetAll\",value:function(e,t){var n={actionPath:\"floating_ips\",key:\"floating_ips\",qs:{tag_name:e?e.tag_name||\"\":\"\",per_page:e?e.per_page||this.per_page:this.per_page,page:e?e.page||1:1},includeAll:e?e.includeAll||!1:!1};return this.requestHelper.request(n,t)}},{key:\"floatingIpsAssignDroplet\",value:function(e,t){var n={actionPath:\"floating_ips\",method:\"POST\",body:{droplet_id:e}};return this.requestHelper.request(n,t)}},{key:\"floatingIpsAssignRegion\",value:function(e,t){var n={actionPath:\"floating_ips\",method:\"POST\",body:{region:e}};return this.requestHelper.request(n,t)}},{key:\"floatingIpsGet\",value:function(e,t){var n={actionPath:\"floating_ips/\"+encodeURIComponent(e)};return this.requestHelper.request(n,t)}},{key:\"floatingIpsDelete\",value:function(e,t){var n={actionPath:\"floating_ips/\"+encodeURIComponent(e),method:\"DELETE\"};return this.requestHelper.request(n,t)}},{key:\"floatingIpsRequestAction\",value:function(e,t,n){var a={actionPath:\"floating_ips/\"+encodeURIComponent(e)+\"/actions\",method:\"POST\",body:t};return this.requestHelper.request(a,n)}},{key:\"floatingIpsGetActions\",value:function(e,t,n){var a={actionPath:\"floating_ips/\"+encodeURIComponent(e)+\"/actions\",key:\"actions\",qs:{tag_name:t?t.tag_name||\"\":\"\",per_page:t?t.per_page||this.per_page:this.per_page,page:t?t.page||1:1},includeAll:t?t.includeAll||!1:!1};return this.requestHelper.request(a,n)}},{key:\"floatingIpsGetAction\",value:function(e,t,n){var a={actionPath:\"floating_ips/\"+encodeURIComponent(e)+\"/actions/\"+encodeURIComponent(t)};return this.requestHelper.request(a,n)}},{key:\"tagsCreate\",value:function(e,t){var n={actionPath:\"tags\",method:\"POST\",body:{name:e}};return this.requestHelper.request(n,t)}},{key:\"tagsDelete\",value:function(e,t){var n={actionPath:\"tags/\"+encodeURIComponent(e),method:\"DELETE\"};return this.requestHelper.request(n,t)}},{key:\"tagsGet\",value:function(e,t){var n={actionPath:\"tags/\"+encodeURIComponent(e)};return this.requestHelper.request(n,t)}},{key:\"tagsGetAll\",value:function(e,t){var n={actionPath:\"tags\",key:\"tags\",qs:{tag_name:e?e.tag_name||\"\":\"\",per_page:e?e.per_page||this.per_page:this.per_page,page:e?e.page||1:1},includeAll:e?e.includeAll||!1:!1};return this.requestHelper.request(n,t)}},{key:\"tagsAddResources\",value:function(e,t,n){var a={actionPath:\"tags/\"+encodeURIComponent(e)+\"/resources\",method:\"POST\",body:t};return this.requestHelper.request(a,n)}},{key:\"tagsDeleteResource\",value:function(e,t,n){var a={actionPath:\"tags/\"+encodeURIComponent(e)+\"/resources\",method:\"DELETE\",body:t};return this.requestHelper.request(a,n)}},{key:\"tagsGetDroplets\",value:function(e,t,n){var a={actionPath:\"droplets\",key:\"droplets\",qs:{per_page:t?t.per_page||this.per_page:this.per_page,page:t?t.page||1:1,tag_name:e},includeAll:t?t.includeAll||!1:!1};return this.requestHelper.request(a,n)}},{key:\"tagsDeleteDroplets\",value:function(e,t){var n={actionPath:\"droplets\",method:\"DELETE\",qs:{tag_name:e}};return this.requestHelper.request(n,t)}},{key:\"tagsRequestAction\",value:function(e,t,n){var a={actionPath:\"droplets/actions\",method:\"POST\",qs:{tag_name:e},body:t};return this.requestHelper.request(a,n)}},{key:\"volumes\",value:function(e,t){var n={actionPath:\"volumes\",method:\"GET\",qs:{region:e||\"\"}};return this.requestHelper.request(n,t)}},{key:\"volumesCreate\",value:function(e,t){var n={actionPath:\"volumes\",method:\"POST\",body:e};return this.requestHelper.request(n,t)}},{key:\"volumesGetById\",value:function(e,t){var n={actionPath:\"volumes/\"+e,method:\"GET\"};return this.requestHelper.request(n,t)}},{key:\"volumesGetByName\",value:function(e,t,n){var a={actionPath:\"volumes\",method:\"GET\",qs:{name:e,region:t}};return this.requestHelper.request(a,n)}},{key:\"volumesDeleteById\",value:function(e,t){var n={actionPath:\"volumes/\"+e,method:\"DELETE\"};return this.requestHelper.request(n,t)}},{key:\"volumesDeleteByName\",value:function(e,t,n){var a={actionPath:\"volumes\",method:\"DELETE\",qs:{name:e,region:t}};return this.requestHelper.request(a,n)}},{key:\"volumesRequestAction\",value:function(e,t,n){var a={actionPath:\"volumes/\"+encodeURIComponent(e)+\"/actions\",method:\"POST\",body:t};return this.requestHelper.request(a,n)}}]),e}();exports[\"default\"]=DigitalOcean,module.exports=exports[\"default\"];","/home/travis/build/npmtest/node-npmtest-do-wrapper/node_modules/do-wrapper/dist/request-helper.js":"\"use strict\";function _interopRequireDefault(e){return e&&e.__esModule?e:{\"default\":e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}Object.defineProperty(exports,\"__esModule\",{value:!0});var _createClass=function(){function e(e,t){for(var u=0;u<t.length;u++){var n=t[u];n.enumerable=n.enumerable||!1,n.configurable=!0,\"value\"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,u,n){return u&&e(t.prototype,u),n&&e(t,n),t}}(),_request=require(\"request\"),_request2=_interopRequireDefault(_request),RequestHelper=function(){function e(t){_classCallCheck(this,e),this.headers={authorization:\"Bearer \"+t,content_type:\"application/json\"},this.apiUrl=\"https://api.digitalocean.com/v2/\"}return _createClass(e,[{key:\"request\",value:function(e,t){var u=void 0;return t||(u=new Promise(function(e,u){t=function(t,n,s){t?u(t):e({response:n,body:s})}})),e.includeAll?this.getAllPages(e.key,e,t):this.submitRequest(e,t),u}},{key:\"submitRequest\",value:function(e,t){var u=this,n=this.requestBuilder(e);(0,_request2[\"default\"])(n,function(e,n,s){e?t(e):e||u.isSuccessfulRequest(n.statusCode)?t(null,n,s):t(s)})}},{key:\"isSuccessfulRequest\",value:function(e){var t=/^[2][0-9][0-9]$/;return t.test(e)}},{key:\"getAllPages\",value:function(e,t,u){var n=this,s=[],r=0,i=0,a=1;t.qs.page=1,this.submitRequest(t,function(o,l,c){return o&&u(o),r=c.meta.total,s=s.concat(c[e]),i=r/(t.qs.per_page||25),s.length>=r?u(null,l,s):void n.getRemainingPages(t,2,i,function(t,n,r){t&&u(t),a++,s=s.concat(r[e]),a===i&&u(null,n,s)})})}},{key:\"getRemainingPages\",value:function(e,t,u,n){for(var s=t;u>=s;s++)e.qs.page=s,this.submitRequest(e,n)}},{key:\"requestBuilder\",value:function(e){return{uri:this.apiUrl+e.actionPath,method:e.method||\"GET\",headers:e.headers||this.headers,body:e.body||{},strictSSL:!0,json:!0,qs:e.qs||{}}}}]),e}();exports[\"default\"]=RequestHelper,module.exports=exports[\"default\"];","/home/travis/build/npmtest/node-npmtest-do-wrapper/node_modules/do-wrapper/gulpfile.js":"var gulp              = require('gulp'),\n    babel             = require('gulp-babel'),\n    uglify            = require('gulp-uglify'),\n    SOURCE_DIRECTORY  = 'src/**/*.js',\n    DEST_DIRECTORY    = 'dist/';\n\ngulp.task('default', ['compile']);\n\ngulp.task('compile', function () {\n  return gulp.src(SOURCE_DIRECTORY)\n          .pipe(babel({experimental: true}))\n          .pipe(uglify())\n          .pipe(gulp.dest(DEST_DIRECTORY));\n});\n","/home/travis/build/npmtest/node-npmtest-do-wrapper/node_modules/do-wrapper/src/do-wrapper.js":"'use strict';\n\nimport RequestHelper from './request-helper';\n\nexport default class DigitalOcean {\n  /**\n   * Digital Ocean API Wrapper\n   * @param {string} token - Your Private API Token\n   * @param {number} size - Page Size of results to return\n   * @constructor\n   */\n  constructor(token, size) {\n    this.per_page = size;\n    this.requestHelper = new RequestHelper(token);\n  }\n\n  /**\n   * Get Account Information\n   * Info {@link https://developers.digitalocean.com/documentation/v2/#account account}\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  account(callback) {\n    let options = {actionPath: 'account'};\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Get Account Actions\n   * @param {{per_page: number, page: number, includeAll: boolean}} query - Query Options\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  accountGetActions(query, callback) {\n    let options = {\n      actionPath: 'actions',\n      key: 'actions',\n      qs: {\n        tag_name: (query) ? (query.tag_name || '') : '',\n        per_page: (query) ? (query.per_page || this.per_page) : this.per_page,\n        page: (query) ? (query.page || 1) : 1\n      },\n      includeAll: (query) ? (query.includeAll || false) : false\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Get Action Information for Account\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#retrieve-an-existing-action retrieve-an-existing-action}\n   *\n   * @param {number} actionId - The Id of the Action\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  accountGetAction(actionId, callback) {\n    let options = {\n      actionPath: 'actions/' + encodeURIComponent(actionId)\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * List all SSH Keys\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#list-all-keys list-all-keys}\n   *\n   * @param {{per_page: number, page: number, includeAll: boolean}} query - Query Options\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  accountGetKeys(query, callback) {\n    let options = {\n      actionPath: 'account/keys',\n      key: 'ssh_keys',\n      qs: {\n        tag_name: (query) ? (query.tag_name || '') : '',\n        per_page: (query) ? (query.per_page || this.per_page) : this.per_page,\n        page: (query) ? (query.page || 1) : 1\n      },\n      includeAll: (query) ? (query.includeAll || false) : false\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Add a new SSH Key\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#create-a-new-key create-a-new-key}\n   *\n   * @param {*} configuration - Information required to create SSH Key | {name: ?, public_key: ?}\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  accountAddKey(configuration, callback) {\n    let options = {\n      actionPath: 'account/keys',\n      method: 'POST',\n      body: configuration\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Get an SSH Key via its Id\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#retrieve-an-existing-key retrieve-an-existing-key}\n   *\n   * @param {number} keyId - The Id of the Key\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  accountGetKeyById(keyId, callback) {\n    let options = {\n      actionPath: 'account/keys/' + encodeURIComponent(keyId)\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Get an SSH Key via its Fingerprint\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#retrieve-an-existing-key retrieve-an-existing-key}\n   *\n   * @param {string} fingerprint - The Fingerprint of the Key\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  accountGetKeyByFingerprint(fingerprint, callback) {\n    let options = {\n      actionPath: 'account/keys/' + encodeURIComponent(fingerprint)\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Rename a SSH Key\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#update-a-key update-a-key}\n   *\n   * @param {*} keyIdentity - The Id or Fingerprint of the SSH Key\n   * @param {string} keyName - What to rename the SSH Key to\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  accountRenameKey(keyIdentity, keyName, callback) {\n    let options = {\n      actionPath: 'account/keys/' + encodeURIComponent(keyIdentity),\n      method: 'PUT',\n      body: {\n        name: keyName\n      }\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Delete a SSH Key\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#destroy-a-key destroy-a-key}\n   *\n   * @param {*} keyIdentity - The Id or Fingerprint of the SSH Key\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  accountDeleteKey(keyIdentity, callback) {\n    let options = {\n      actionPath: 'account/keys/' + encodeURIComponent(keyIdentity),\n      method: 'DELETE'\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Get a list of Droplets\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#list-all-droplets list-all-droplets}\n   *\n   * @param {{per_page: number, page: number, includeAll: boolean}} query - Query Options\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  dropletsGetAll(query, callback) {\n    let options = {\n      actionPath: 'droplets',\n      key: 'droplets',\n      qs: {\n        tag_name: query.tag_name || undefined,\n        per_page: (query) ? (query.per_page || this.per_page) : this.per_page,\n        page: (query) ? (query.page || 1) : 1\n      },\n      includeAll: (query) ? (query.includeAll || false) : false\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Get a list of Kernels available for a Droplet\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#list-all-available-kernels-for-a-droplet list-all-available-kernels-for-a-droplet}\n   *\n   * @param {number} dropletId - The Id of the Droplet\n   * @param {{per_page: number, page: number, includeAll: boolean}} query - Query Options\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  dropletsGetKernels(dropletId, query, callback) {\n    let options = {\n      actionPath: 'droplets/' + encodeURIComponent(dropletId) + '/kernels',\n      key: 'kernels',\n      qs: {\n        tag_name: (query) ? (query.tag_name || '') : '',\n        per_page: (query) ? (query.per_page || this.per_page) : this.per_page,\n        page: (query) ? (query.page || 1) : 1\n      },\n      includeAll: (query) ? (query.includeAll || false) : false\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Get a list of Snapshots for a Droplet\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#list-snapshots-for-a-droplet retrieve-snapshots-for-a-droplet}\n   *\n   * @param {number} dropletId - The Id of the Droplet\n   * @param {{per_page: number, page: number, includeAll: boolean}} query - Query Options\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  dropletsGetSnapshots(dropletId, query, callback) {\n    let options = {\n      actionPath: 'droplets/' + encodeURIComponent(dropletId) + '/snapshots',\n      key: 'snapshots',\n      qs: {\n        tag_name: (query) ? (query.tag_name || '') : '',\n        per_page: (query) ? (query.per_page || this.per_page) : this.per_page,\n        page: (query) ? (query.page || 1) : 1\n      },\n      includeAll: (query) ? (query.includeAll || false) : false\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Get a list of Backups for a Droplet\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#list-backups-for-a-droplet list-backups-for-a-droplet}\n   *\n   * @param {number} dropletId - The Id of the Droplet\n   * @param {{per_page: number, page: number, includeAll: boolean}} query - Query Options\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  dropletsGetBackups(dropletId, query, callback) {\n    let options = {\n      actionPath: 'droplets/' + encodeURIComponent(dropletId) + '/backups',\n      key: 'backups',\n      qs: {\n        tag_name: (query) ? (query.tag_name || '') : '',\n        per_page: (query) ? (query.per_page || this.per_page) : this.per_page,\n        page: (query) ? (query.page || 1) : 1\n      },\n      includeAll: (query) ? (query.includeAll || false) : false\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Get a list of Actions for a Droplet\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#list-actions-for-a-droplet list-actions-for-a-droplet}\n   *\n   * @param {number} dropletId - The Id of the Droplet\n   * @param {{per_page: number, page: number, includeAll: boolean}} query - Query Options\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  dropletsGetActions(dropletId, query, callback) {\n    let options = {\n      actionPath: 'droplets/' + encodeURIComponent(dropletId) + '/actions',\n      key: 'actions',\n      qs: {\n        tag_name: (query) ? (query.tag_name || '') : '',\n        per_page: (query) ? (query.per_page || this.per_page) : this.per_page,\n        page: (query) ? (query.page || 1) : 1\n      },\n      includeAll: (query) ? (query.includeAll || false) : false\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Create a New Droplet\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#create-a-new-droplet create-a-new-droplet}\n   *\n   * @param {*} configuration - Creation parameters, see info for more details.\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  dropletsCreate(configuration, callback) {\n    let options = {\n      actionPath: 'droplets',\n      method: 'POST',\n      body: configuration\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Get a Droplet by Id\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#retrieve-an-existing-droplet-by-id retrieve-an-existing-droplet-by-id}\n   *\n   * @param {number} dropletId - The Id of the Droplet\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  dropletsGetById(dropletId, callback) {\n    let options = {\n      actionPath: 'droplets/' + encodeURIComponent(dropletId)\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Delete a Droplet\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#delete-a-droplet delete-a-droplet}\n   *\n   * @param {number} dropletId - The Id of the Droplet\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  dropletsDelete(dropletId, callback) {\n    let options = {\n      actionPath: 'droplets/' + encodeURIComponent(dropletId),\n      method: 'DELETE'\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Get a list of Droplet Neighbors\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#list-neighbors-for-a-droplet list-neighbors-for-a-droplet}\n   *\n   * @param {number} dropletId - The Id of the Droplet\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  dropletsGetNeighbors(dropletId, callback) {\n    let options = {\n      actionPath: 'droplets/' + encodeURIComponent(dropletId) + '/neighbors'\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Get a report of Droplets sharing the same hardware\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#list-all-droplet-neighbors list-all-droplet-neighbors}\n   *\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  dropletsGetNeighborsReport(callback) {\n    let options = {\n      actionPath: 'reports/droplet_neighbors'\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Get a list of scheduled Droplet Upgrades\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#list-droplet-upgrades list-droplet-upgrades}\n   *\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  dropletsGetUpgrades(callback) {\n    let options = {\n      actionPath: 'droplet_upgrades'\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Request an Action on a Droplet\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#droplet-actions droplet-actions}\n   *\n   * @param {number} dropletId - The Id of the Droplet\n   * @param {*} action - Action Object\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  dropletsRequestAction(dropletId, action, callback) {\n    let options = {\n      actionPath: 'droplets/' + encodeURIComponent(dropletId) + '/actions',\n      method: 'POST',\n      body: action\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Get an Action for a Droplet\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#retrieve-a-droplet-action retrieve-a-droplet-action}\n   *\n   * @param {number} dropletId - The Id of the Droplet\n   * @param {number} actionId - The Id of the Action\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  dropletsGetAction(dropletId, actionId, callback) {\n    let options = {\n      actionPath: 'droplets/' + encodeURIComponent(dropletId) + '/actions/' + encodeURIComponent(actionId)\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Get all Domains\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#list-all-domains list-all-domains}\n   *\n   * @param {{per_page: number, page: number, includeAll: boolean}} query - Query Options\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  domainsGetAll(query, callback) {\n    let options = {\n      actionPath: 'domains',\n      key: 'domains',\n      qs: {\n        tag_name: (query) ? ((query) ? (query.tag_name || '') : '') : '',\n        per_page: (query) ? (query.per_page || this.per_page) : this.per_page,\n        page: (query) ? (query.page || 1) : 1\n      }\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Add a new Domain\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#create-a-new-domain create-a-new-domain}\n   *\n   * @param {string} name - Domain Name\n   * @param {string} ip - The Ip of the Droplet\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  domainsCreate(name, ip, callback) {\n    let options = {\n      actionPath: 'domains',\n      method: 'POST',\n      body: {name: name, ip_address: ip}\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Get a Domain\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#retrieve-an-existing-domain retrieve-an-existing-domain}\n   *\n   * @param {string} name - The Domain Name\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  domainsGet(name, callback) {\n    let options = {\n      actionPath: 'domains/' + encodeURIComponent(name)\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Delete a Domain\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#delete-a-domain delete-a-domain}\n   *\n   * @param {string} name - The Domain Name\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  domainsDelete(name, callback) {\n    let options = {\n      actionPath: 'domains/' + encodeURIComponent(name),\n      method: 'DELETE'\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Get all Domain Records for a Domain\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#list-all-domain-records list-all-domain-records}\n   *\n   * @param {string} name - The Domain Name\n   * @param {{per_page: number, page: number, includeAll: boolean}} query - Query Options\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  domainRecordsGetAll(name, query, callback) {\n    let options = {\n      actionPath: 'domains/' + encodeURIComponent(name) + '/records',\n      key: 'domain_records',\n      qs: {\n        tag_name: (query) ? (query.tag_name || '') : '',\n        per_page: (query) ? (query.per_page || this.per_page) : this.per_page,\n        page: (query) ? (query.page || 1) : 1\n      },\n      includeAll: (query) ? (query.includeAll || false) : false\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Create a new Domain Record on a Domain\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#create-a-new-domain-record create-a-new-domain-record}\n   *\n   * @param {string} name - The Domain Name\n   * @param {*} configuration - Data required to create the Domain Record\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  domainRecordsCreate(name, configuration, callback) {\n    let options = {\n      actionPath: 'domains/' + encodeURIComponent(name) + '/records',\n      method: 'POST',\n      body: configuration\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Get a single Domain Record\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#retrieve-an-existing-domain-record retrieve-an-existing-domain-record}\n   *\n   * @param {string} name - The Domain Name\n   * @param {number} domainRecordId - The Id of the Domain Record\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  domainRecordsGet(name, domainRecordId, callback) {\n    let options = {\n      actionPath: 'domains/' + encodeURIComponent(name) + '/records/' + encodeURIComponent(domainRecordId)\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Update a Domain Record\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#update-a-domain-record update-a-domain-record}\n   *\n   * @param {string} name - The Domain Name\n   * @param {number} domainRecordId - The Id of the Domain Record\n   * @param {*} configuration - Data required to update the Domain Record\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  domainRecordsUpdate(name, domainRecordId, configuration, callback) {\n    let options = {\n      actionPath: 'domains/' + encodeURIComponent(name) + '/records/' + encodeURIComponent(domainRecordId),\n      method: 'PUT',\n      body: configuration\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Delete a Domain Record\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#delete-a-domain-record delete-a-domain-record}\n   *\n   * @param {string} name - The Domain Name\n   * @param {number} domainRecordId - The Id of the Domain Record\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  domainRecordsDelete(name, domainRecordId, callback) {\n    let options = {\n      actionPath: 'domains/' + encodeURIComponent(name) + '/records/' + encodeURIComponent(domainRecordId),\n      method: 'DELETE'\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Get all Regions\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#list-all-regions list-all-regions}\n   *\n   * @param {{per_page: number, page: number, includeAll: boolean}} query - Query Options\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  regionsGetAll(query, callback) {\n    let options = {\n      actionPath: 'regions',\n      key: 'regions',\n      qs: {\n        tag_name: (query) ? (query.tag_name || '') : '',\n        per_page: (query) ? (query.per_page || this.per_page) : this.per_page,\n        page: (query) ? (query.page || 1) : 1\n      },\n      includeAll: (query) ? (query.includeAll || false) : false\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Get all Droplet sizes\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#list-all-sizes list-all-sizes}\n   *\n   * @param {{per_page: number, page: number, includeAll: boolean}} query - Query Options\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  sizesGetAll(query, callback) {\n    let options = {\n      actionPath: 'sizes',\n      key: 'sizes',\n      qs: {\n        tag_name: (query) ? (query.tag_name || '') : '',\n        per_page: (query) ? (query.per_page || this.per_page) : this.per_page,\n        page: (query) ? (query.page || 1) : 1\n      },\n      includeAll: (query) ? (query.includeAll || false) : false\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Get all Images\n   * Include type=[distribution,application] or private=true in the query object to limit results.\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#list-all-images list-all-images}\n   *\n   * @param {{per_page: number, page: number, includeAll: boolean, private: boolean}} query - Query Options\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  imagesGetAll(query, callback) {\n    let options = {\n      actionPath: 'images',\n      key: 'images',\n      qs: {\n        tag_name: (query) ? (query.tag_name || '') : '',\n        per_page: (query) ? (query.per_page || this.per_page) : this.per_page,\n        page: (query) ? (query.page || 1) : 1,\n        private: query.private || false,\n        type: query.type || null\n      },\n      includeAll: (query) ? (query.includeAll || false) : false\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Get an Image using its Id\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#retrieve-an-existing-image-by-id retrieve-an-existing-image-by-id}\n   *\n   * @param {number} imageId - The Id of the Image\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  imagesGetById(imageId, callback) {\n    let options = {\n      actionPath: 'images/' + encodeURIComponent(imageId)\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Get an Image using its Slug\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#retrieve-an-existing-image-by-slug retrieve-an-existing-image-by-slug}\n   *\n   * @param {string} slug - The Slug of the Image\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  imagesGetBySlug(slug, callback) {\n    let options = {\n      actionPath: 'images/' + encodeURIComponent(slug)\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Get all Actions for an Image\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#list-all-actions-for-an-image list-all-actions-for-an-image}\n   *\n   * @param {number} imageId - The Id of the Image\n   * @param {{per_page: number, page: number, includeAll: boolean}} query - Query Options\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  imagesGetActions(imageId, query, callback) {\n    let options = {\n      actionPath: 'images/' + encodeURIComponent(imageId) + '/actions',\n      key: 'actions',\n      qs: {\n        tag_name: (query) ? (query.tag_name || '') : '',\n        per_page: (query) ? (query.per_page || this.per_page) : this.per_page,\n        page: (query) ? (query.page || 1) : 1\n      },\n      includeAll: (query) ? (query.includeAll || false) : false\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Update the name of an Image\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#update-an-image update-an-image}\n   *\n   * @param {number} imageId - The Id of the Image\n   * @param {string} name - The Name to update the Image to\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  imagesUpdate(imageId, name, callback) {\n    let options = {\n      actionPath: 'images/' + encodeURIComponent(imageId),\n      body: {name: name},\n      method: 'PUT'\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Delete an Image\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#delete-an-image delete-an-image}\n   *\n   * @param {number} imageId - The Id of the Image\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  imagesDelete(imageId, callback) {\n    let options = {\n      actionPath: 'images/' + encodeURIComponent(imageId),\n      method: 'DELETE'\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Request an Action on an Image\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#image-actions image-actions}\n   *\n   * @param {number} imageId - The Id of the Image\n   * @param {*} action - Action Options\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  imagesRequestAction(imageId, action, callback) {\n    let options = {\n      actionPath: 'images/' + encodeURIComponent(imageId) + '/actions',\n      method: 'POST',\n      body: action\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Get the status of an Action\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#retrieve-an-existing-image-action retrieve-an-existing-image-action}\n   *\n   * @param {number} imageId - The Id of the Image\n   * @param {number} actionId - The Id of the Action\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  imagesGetAction(imageId, actionId, callback) {\n    let options = {\n      actionPath: 'images/' + encodeURIComponent(imageId) + '/actions/' + encodeURIComponent(actionId)\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Get all Floating IPs\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#list-all-floating-ips list-all-floating-ips}\n   *\n   * @param {{per_page: number, page: number, includeAll: boolean}} query - Query Options\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  floatingIpsGetAll(query, callback) {\n    let options = {\n      actionPath: 'floating_ips',\n      key: 'floating_ips',\n      qs: {\n        tag_name: (query) ? (query.tag_name || '') : '',\n        per_page: (query) ? (query.per_page || this.per_page) : this.per_page,\n        page: (query) ? (query.page || 1) : 1\n      },\n      includeAll: (query) ? (query.includeAll || false) : false\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Create and assign a Floating IP to a specific droplet.\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#create-a-new-floating-ip-assigned-to-a-droplet create-a-new-floating-ip-assigned-to-a-droplet}\n   *\n   * @param {number} dropletId - The ID of Droplet that the Floating IP will be assigned to.\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  floatingIpsAssignDroplet(dropletId, callback) {\n    let options = {\n      actionPath: 'floating_ips',\n      method: 'POST',\n      body: {\n        droplet_id: dropletId\n      }\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Create and assign a Floating IP to a region.\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#create-a-new-floating-ip-assigned-to-a-droplet create-a-new-floating-ip-assigned-to-a-droplet}\n   *\n   * @param {string} region - The slug identifier for the region the Floating IP will be reserved to.\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  floatingIpsAssignRegion(region, callback) {\n    let options = {\n      actionPath: 'floating_ips',\n      method: 'POST',\n      body: {\n        region: region\n      }\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Retrieve an existing Floating IP\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#retrieve-an-existing-floating-ip retrieve-an-existing-floating-ip}\n   *\n   * @param {string} ipAddress - Floating IP address.\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  floatingIpsGet(ipAddress, callback) {\n    let options = {\n      actionPath: 'floating_ips/' + encodeURIComponent(ipAddress)\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Delete a Floating IP\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#delete-a-floating-ips delete-a-floating-ips}\n   *\n   * @param {string} ipAddress - Floating IP address\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  floatingIpsDelete(ipAddress, callback) {\n    let options = {\n      actionPath: 'floating_ips/' + encodeURIComponent(ipAddress),\n      method: 'DELETE'\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Request an action on a Floating IP\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#floating-ip-actions floating-ip-actions}\n   *\n   * @param {string} ipAddress - Floating IP address\n   * @param {*} action - Action options\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  floatingIpsRequestAction(ipAddress, action, callback) {\n    let options = {\n      actionPath: 'floating_ips/' + encodeURIComponent(ipAddress) + '/actions',\n      method: 'POST',\n      body: action\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * List all actions for a Floating IP\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#list-all-actions-for-a-floating-ip list-all-actions-for-a-floating-ip}\n   *\n   * @param {string} ipAddress - Floating IP address\n   * @param {{per_page: number, page: number, includeAll: boolean}} query - Query Options\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  floatingIpsGetActions(ipAddress, query, callback) {\n    let options = {\n      actionPath: 'floating_ips/' + encodeURIComponent(ipAddress) + '/actions',\n      key: 'actions',\n      qs: {\n        tag_name: (query) ? (query.tag_name || '') : '',\n        per_page: (query) ? (query.per_page || this.per_page) : this.per_page,\n        page: (query) ? (query.page || 1) : 1\n      },\n      includeAll: (query) ? (query.includeAll || false) : false\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Retrieve an existing Floating IP action\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#retrieve-an-existing-floating-ip-action retrieve-an-existing-floating-ip-action}\n   *\n   * @param {string} ipAddress - Floating IP address\n   * @param {number} actionId - The Id of the action\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  floatingIpsGetAction(ipAddress, actionId, callback) {\n    let options = {\n      actionPath: 'floating_ips/' + encodeURIComponent(ipAddress) + '/actions/' + encodeURIComponent(actionId)\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Add a new Tag\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/tagging-preview/#create-a-new-tag create-a-new-tag}\n   *\n   * @param {string} name - Tag Name\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  tagsCreate(name, callback) {\n    let options = {\n      actionPath: 'tags',\n      method: 'POST',\n      body: {name: name}\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Delete a Tag\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/tagging-preview/#delete-a-tag delete-a-tag}\n   *\n   * @param {string} name - Tag Name\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  tagsDelete(name, callback) {\n    let options = {\n      actionPath: 'tags/' + encodeURIComponent(name),\n      method: 'DELETE'\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Get a Tag\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/tagging-preview/#retrieve-a-tag retrieve-a-tag}\n   *\n   * @param {string} name - The Tag Name\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  tagsGet(name, callback) {\n    let options = {\n      actionPath: 'tags/' + encodeURIComponent(name)\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Get all Tags\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/tagging-preview/#list-all-tags list-all-tags}\n   *\n   * @param {{per_page: number, page: number, includeAll: boolean}} query - Query Options\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  tagsGetAll(query, callback) {\n    let options = {\n      actionPath: 'tags',\n      key: 'tags',\n      qs: {\n        tag_name: (query) ? (query.tag_name || '') : '',\n        per_page: (query) ? (query.per_page || this.per_page) : this.per_page,\n        page: (query) ? (query.page || 1) : 1\n      },\n      includeAll: (query) ? (query.includeAll || false) : false\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Tag resources\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/tagging-preview/#tag-a-resource tag-a-resource}\n   *\n   * @param {string} name - The Tag Name\n   * @param {*} configuration - Array of objects which identify the resources to tag\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  tagsAddResources(name, configuration, callback) {\n    let options = {\n      actionPath: 'tags/' + encodeURIComponent(name) + '/resources',\n      method: 'POST',\n      body: configuration\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Untag a resource\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/tagging-preview/#untag-a-resource untag-a-resource}\n   *\n   * @param {string} name - The Tag Name\n   * @param {*} configuration - Array of objects which identify the resources to untag\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  tagsDeleteResource(name, configuration, callback) {\n    let options = {\n      actionPath: 'tags/' + encodeURIComponent(name) + '/resources',\n      method: 'DELETE',\n      body: configuration\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Get Droplets by Tag\n   *\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/tagging-preview/#listing-droplets-by-tag listing-droplets-by-tag}\n   *\n   * @param {string} name - The Tag Name\n   * @param {{per_page: number, page: number, includeAll: boolean}} query - Query Options\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  tagsGetDroplets(name, query, callback) {\n    let options = {\n      actionPath: 'droplets',\n      key: 'droplets',\n      qs: {\n        per_page: (query) ? (query.per_page || this.per_page) : this.per_page,\n        page: (query) ? (query.page || 1) : 1,\n        tag_name: name\n      },\n      includeAll: (query) ? (query.includeAll || false) : false\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Delete Droplets by Tag\n   *\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/tagging-preview/#deleting-droplets-by-tag deleting-droplets-by-tag}\n   *\n   * @param {string} name - The Tag Name\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  tagsDeleteDroplets(name, callback) {\n    let options = {\n      actionPath: 'droplets',\n      method: 'DELETE',\n      qs: {\n        tag_name: name\n      }\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Request an Action on a tag's Droplets\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/tagging-preview/#acting-on-tagged-droplets acting-on-tagged-droplets}\n   *\n   * @param {string} name - The Tag Name\n   * @param {*} action - Action Object\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  tagsRequestAction(name, action, callback) {\n    let options = {\n      actionPath: 'droplets/actions',\n      method: 'POST',\n      qs: {\n        tag_name: name\n      },\n      body: action\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * List all of the Block Storage Volumes available on your account\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#list-all-block-storage-volumes list-all-block-storage-volumes}\n   *\n   * @param {string} [region] - Optional Region Name Filter\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  volumes(region, callback) {\n    let options = {\n      actionPath: 'volumes',\n      method: 'GET',\n      qs: {\n        region: region || ''\n      }\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Create a new Block Storage Volume in a particular region\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#create-a-new-block-storage-volume create-a-new-block-storage-volume}\n   *\n   * @param {Object} volume - Volume configuration to create\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  volumesCreate(volume, callback) {\n    let options = {\n      actionPath: 'volumes',\n      method: 'POST',\n      body: volume\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Show information about a Block Storage Volume based on its ID\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#retrieve-an-existing-block-storage-volume retrieve-an-existing-block-storage-volume}\n   *\n   * @param {string} driveId - ID of the Volume Drive\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  volumesGetById(driveId, callback) {\n    let options = {\n      actionPath: `volumes/${driveId}`,\n      method: 'GET'\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Show information about a Block Storage Volume based on its Name and Region\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#retrieve-an-existing-block-storage-volume-by-name retrieve-an-existing-block-storage-volume-by-name}\n   *\n   * @param {string} name - Name of the Block Storage Volume\n   * @param {string} region - Region of the Block Storage Volume\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  volumesGetByName(name, region, callback) {\n    let options = {\n      actionPath: 'volumes',\n      method: 'GET',\n      qs: {\n        name: name,\n        region: region\n      }\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Delete a Block Storage Volume based on its ID\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#delete-a-block-storage-volume delete-a-block-storage-volume}\n   *\n   * @param {string} driveId - ID of the Block Storage Volume Drive\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  volumesDeleteById(driveId, callback) {\n    let options = {\n      actionPath: `volumes/${driveId}`,\n      method: 'DELETE'\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Delete a Block Storage Volume based on its Name and Region\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#delete-a-block-storage-volume-by-name delete-a-block-storage-volume-by-name}\n   *\n   * @param {string} name - Name of the Block Storage Volume\n   * @param {string} region - Region of the Block Storage Volume\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  volumesDeleteByName(name, region, callback) {\n    let options = {\n      actionPath: 'volumes',\n      method: 'DELETE',\n      qs: {\n        name: name,\n        region: region\n      }\n    };\n    return this.requestHelper.request(options, callback);\n  }\n\n  /**\n   * Request an Action on a Volume\n   * Info: {@link https://developers.digitalocean.com/documentation/v2/#block-storage-actions block-storage-actions}\n   *\n   * @param {number} volumeId - The Id of the Volume\n   * @param {*} action - Action Object\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  volumesRequestAction(volumeId, action, callback) {\n    let options = {\n      actionPath: 'volumes/' + encodeURIComponent(volumeId) + '/actions',\n      method: 'POST',\n      body: action\n    };\n    return this.requestHelper.request(options, callback);\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-do-wrapper/node_modules/do-wrapper/src/request-helper.js":"'use strict';\n\nimport request from 'request';\n\nexport default class RequestHelper {\n  /**\n   * Request Helper\n   * @param {string} token - Your Private API Token\n   * @constructor\n   */\n  constructor(token) {\n    this.headers = {\n      'authorization': 'Bearer ' + token,\n      'content_type': 'application/json'\n    };\n    this.apiUrl = 'https://api.digitalocean.com/v2/';\n  }\n\n  /**\n   * Check the required Request & Trigger\n   * @param {*} options - Request Options\n   * @param {*} [callback] - Optional function to execute on completion\n   * @returns {Promise|undefined} - Returns a promise if callback is not defined\n   */\n  request(options, callback) {\n    let promise;\n    if ( !callback ) {\n      promise = new Promise((resolve, reject) => {\n        callback = (err, response, body) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve({response, body});\n          }\n        };\n      });\n    }\n    options.includeAll ? this.getAllPages(options.key, options, callback) : this.submitRequest(options, callback);\n    return promise; // Will be undefined if callback was passed.\n  }\n\n  /**\n   * Submit the Request\n   * @param {*} options - Request Options Object\n   * @param {*} callback - Function to execute on completion\n   */\n  submitRequest(options, callback) {\n    let requestOptions = this.requestBuilder(options);\n    request(requestOptions, (err, response, body) => {\n      if ( err ) {\n        callback(err);\n      } else if ( !err && !this.isSuccessfulRequest(response.statusCode) ) {\n        callback(body);\n      } else {\n        callback(null, response, body);\n      }\n    });\n  }\n\n  /**\n   * Validate the Response Status Code\n   * @param {number} statusCode - The Status Code\n   * @returns {boolean}\n   */\n  isSuccessfulRequest(statusCode) {\n    const statusCodePattern = /^[2][0-9][0-9]$/;\n    return statusCodePattern.test(statusCode);\n  }\n\n  /**\n   * Get All Pages\n   * @param {string} key - Type of Item\n   * @param {*} options - Request Options\n   * @param {*} callback - Function to execute on completion\n   */\n  getAllPages(key, options, callback) {\n    let items = [],\n        total = 0,\n        required = 0,\n        completed = 1;\n\n    options.qs.page = 1;\n\n    this.submitRequest(options, (err, response, body) => {\n      if ( err ) {\n        callback(err);\n      }\n      total = body.meta.total;\n      items = items.concat(body[key]);\n      required = total / (options.qs.per_page || 25);\n      if ( items.length >= total ) {\n        return callback(null, response, items);\n      } else {\n        this.getRemainingPages(options, 2, required, function (err, response, body) {\n          if ( err ) {\n            callback(err);\n          }\n          completed++;\n          items = items.concat(body[key]);\n          if ( completed === required ) {\n            callback(null, response, items);\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * Get the Remaining Pages\n   * @param {*} options - Request Options\n   * @param {number} first - The first page to retrieve\n   * @param {number} last - The last page to retrieve\n   * @param {*} callback - Function to execute on completion\n   */\n  getRemainingPages(options, first, last, callback) {\n    for ( let current = first; current <= last; current++ ) {\n      options.qs.page = current;\n      this.submitRequest(options, callback);\n    }\n  }\n\n  /**\n   * Build Options for Request\n   * @param {*} options - Options Object\n   * @returns {*}\n   */\n  requestBuilder(options) {\n    return {\n      uri: this.apiUrl + options.actionPath,\n      method: options.method || 'GET',\n      headers: options.headers || this.headers,\n      body: options.body || {},\n      strictSSL: true,\n      json: true,\n      qs: options.qs || {}\n    };\n  }\n}\n"}